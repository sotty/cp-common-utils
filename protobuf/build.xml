<?xml version="1.0"?>

<project name="Utils Protobuf" default="dist" basedir="" xmlns:ivy="antlib:org.apache.ivy.ant">
    <description>
        Complexible Utility Classes
    </description>

	<property file="../project.properties"/>

	<!-- Global Properties -->
	<property name="src" location="src" />
	<property name="lib" location="lib" />

	<property name="build" location="build" />

	<property name="dist" location="dist" />

	<property name="javadoc.dir" value="${dist}/javadocs"/>

	<property name="project.name" value="cp-common-protobuf" />
	<property name="project.version" value="${protobuf.version}" />

	<property name="publish.repo" value="local.repo" />

	<property name="ivy.settings" location="../settings/ivysettings.xml"/>

	<!-- ******************** IVY ********************** -->

	<property name="ivy.install.version" value="2.2.0" />
	<condition property="ivy.home" value="${env.IVY_HOME}">
		<isset property="env.IVY_HOME" />
	</condition>
	<property name="ivy.home" value="${user.home}/.ant" />
	<property name="ivy.jar.dir" value="${ivy.home}/lib" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
	<property name="ivy.pom.version" value="${protobuf.version}"/>

	<target name="download-ivy" unless="offline">

		<mkdir dir="${ivy.jar.dir}"/>
		<!-- download Ivy from web site so that it can be used even without any special installation -->
		<get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
			 dest="${ivy.jar.file}" usetimestamp="true"/>
	</target>

	<target name="init-ivy" depends="download-ivy">
		<!-- try to load ivy here from ivy home, in case the user has not already dropped
				  it into ant's lib dir (note that the latter copy will always take precedence).
				  We will not fail as long as local lib dir exists (it may be empty) and
				  ivy is in at least one of ant's lib dir or the local lib dir. -->
		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar"/>

		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml"
				 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
	</target>

	<target name="clean-ivy-cache">
		<ivy:cleancache/>
		<delete dir="settings/ivy-cache" failonerror="false"/>
	</target>

	<!-- *********************************************** -->

	<target name="resolve" depends="clean-libs, init-ivy" description="--> retrieve dependencies with ivy">
		<ivy:configure file="${ivy.settings}" />

		<ivy:resolve file="ivy.xml"/>
		<ivy:retrieve pattern="${lib}/[organisation]/[module]/[revision]/[artifact]-[revision].[ext]" type="jar"/>
		<ivy:cachepath pathid="protobuf.classpath"/>
	</target>

	<target name="clean-libs">
		<delete dir="${lib}" />
	</target>

    <target name="init" depends="resolve">
		<path id="project.class.path">
			<path refid="protobuf.classpath"/>
		</path>

        <pathconvert targetos="unix" property="classpath" refid="project.class.path" />
        <echo>CLASSPATH=${classpath}</echo>
        <!-- Create the time stamp -->
        <tstamp/>

        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build}"/>
        <mkdir dir="${build}/protobuf"/>

		<mkdir dir="${dist}"/>
    </target>

    <target name="compile" depends="init"
            description="Compile source files." >

		<javac source="1.5" target="1.5" srcdir="${src}" destdir="${build}/protobuf" debug="yes" deprecation="yes" classpathref="protobuf.classpath">
		</javac>
    </target>

    <target name="build" depends="compile"
            description="Compile sources and copy data files into build directory.">
        <copy todir="${build}/protobuf">
            <fileset dir="${src}">
                <exclude name="**/*.java" />
            </fileset>
        </copy>
    </target>

    <target name="distfiles">
       <!-- Copy in lib files -->
        <mkdir dir="${dist}/lib" />

        <copy todir="${dist}/lib">
            <fileset dir="${lib}">
                <include name="**/*.jar" />
                <exclude name="**/${project.name}*.jar"/>
            </fileset>
        </copy>
    </target>

    <target name="makepom" description="Generate Maven POM.xml" >
		<ivy:info file="ivy.xml"/>
	    <ivy:makepom ivyfile="ivy.xml"
	                 pomfile="pom.xml"
	                 artifactPackaging="jar"
	                 templatefile="../pom.template">
	    <mapping conf="compile" scope="compile"/>
	    <mapping conf="default" scope="runtime"/>
	    <mapping conf="test" scope="test"/>
		</ivy:makepom>
    </target>

    <target name="dist" depends="build,distfiles"
            description="Generate a distribution" >

        <echo>${Class-Path}</echo>

        <!-- Make the pom.xml and pom.properties files -->
	<ivy:info file="ivy.xml"/>
	<mkdir dir="${build}/metainf/maven/${ivy.organisation}/${ivy.module}"/>
	<ivy:makepom ivyfile="ivy.xml" pomfile="${build}/metainf/maven/${ivy.organisation}/${ivy.module}/pom.xml" artifactPackaging="jar">
	    <mapping conf="compile" scope="compile"/>
	    <mapping conf="default" scope="runtime"/>
	    <mapping conf="test" scope="test"/>
	</ivy:makepom>
	<tstamp>
	    <format property="build.date" pattern="EEE MMM dd HH:mm:ss zzz yyyy"/>
	</tstamp>
	<echo file="${build}/metainf/maven/${ivy.organisation}/${ivy.module}/pom.properties">#Generated by build
#${build.date}
version=${ivy.pom.version}
groupId=${ivy.organisation}
artifactId=${ivy.module}
</echo>

        <!-- Make Jar file. -->
	<jar jarfile="${dist}/${project.name}-${project.version}.jar"
		 basedir="${build}/protobuf">
		<metainf dir="${build}/metainf"/>
	</jar>
    </target>

	<target name="publish">
		<ivy:publish resolver="${publish.repo}" pubrevision="${project.version}" overwrite="true">
			<artifacts pattern="${dist}/[artifact]-[revision].[ext]" />
		</ivy:publish>
	</target>

    <target name="clean" description="Clean up build files">
        <delete dir="${build}" />
        <delete dir="${dist}" />
    </target>

	<target name="javadocs" depends="init">
		<javadoc destdir="${javadoc.dir}" access="public" use="true" notree="false"
			nonavbar="false" noindex="false" splitindex="true" author="true"
			version="true" nodeprecatedlist="false" nodeprecated="false"
			doctitle="${project.name}-${project.version}"
			bottom="Copyright &#169; 2010-2013 Clark &amp; Parsia. All Rights Reserved.">

			<link href="http://docs.guava-libraries.googlecode.com/git-history/v14.0.1/javadoc/"/>

			<classpath refid="project.class.path"/>
			<fileset dir="${src}" defaultexcludes="yes"/>
		</javadoc>
	</target>
</project>
